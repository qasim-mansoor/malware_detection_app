import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class Item {
  final int id;
  final Image imageUrl;
  final String text;

  Item(this.id, this.imageUrl, this.text);
}

final items = [
  Item(1, Image.asset('assets/images/snakeio.webp'), 'Snake.io'),
  Item(2, Image.asset('assets/images/globe.jpg'), 'APIOA Browser'),
  Item(3, Image.asset('assets/images/cc.jpg'), 'Candy Crush Saga'),
  Item(4, Image.asset('assets/images/picsart.png'), 'Picsart'),
];

Future<Map<String, dynamic>> fetchData(String url) async {
  final response = await http.get(Uri.parse(url));
  if (response.statusCode == 200) {
    return jsonDecode(response.body);
  } else {
    throw Exception('Failed to fetch data');
  }
}

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: MyHomePage(),
    );
  }
}


class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Applications'),
      ),
      body: ListView.builder(
        itemCount: items.length,
        itemBuilder: (context, index) {
          final item = items[index];
          return ListTile(
            leading: item.imageUrl,
            title: Text(item.text),
            // onTap: () async {
            //   final responseData = await fetchData('http://127.0.0.1:5000/api/${item.id}'); // Replace with your API endpoint
            //   showResponseDialog(context, responseData);
            // },
            onTap: () async {
              showDialog(
                context: context,
                builder: (context) => Center(child: CircularProgressIndicator()),
                barrierDismissible: false,
              );

              try {
                final responseData = await fetchData('https://9944-115-186-57-250.ngrok-free.app/api/classify/${item.id}');
                Navigator.pop(context); // Dismiss the loading indicator
                showResponseDialog(context, responseData);
              } catch (error) {
                Navigator.pop(context); // Dismiss the loading indicator
                // Handle the error (e.g., show an error message)
              }
            },
          );
        },
      ),
    );
  }
}

void showResponseDialog(BuildContext context, Map<String, dynamic> responseData) {
  showDialog(
    context: context,
    builder: (context) => AlertDialog(
      title: Text(
              '${responseData['name']}',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
      content: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Accuracy: ${responseData['accuracy']}'),
            Text('Result: ${responseData['result']}'),
            Text('SDK: ${responseData['sdk']}'),
            Text('Size: ${responseData['size']}'),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: Text('Close'),
        ),
      ],
    ),
  );
}


